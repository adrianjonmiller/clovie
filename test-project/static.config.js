import Handlebars from 'handlebars';
import path from 'path';

export default {
  // Static mode - generates static HTML files
  mode: 'static',
  
  // Basic configuration
  views: './views',
  outputDir: './dist-static',
  
  // Global data available to all routes
  data: {
    siteName: 'Clovie Test Site (Static)',
    description: 'Testing the new routing system in static mode'
  },
  
  // Routes configuration
  routes: [
    {
      path: '/',
      name: 'home',
      view: 'index.html',
      data: async () => {
        // Simulate fetching data
        return {
          title: 'Welcome Home',
          message: 'This page was generated statically with routes!',
          posts: [
            { title: 'Hello World', slug: 'hello-world' },
            { title: 'Getting Started', slug: 'getting-started' },
            { title: 'Advanced Features', slug: 'advanced-features' }
          ]
        };
      }
    },
    {
      path: '/about',
      name: 'about',
      view: 'about.html',
      data: () => ({
        title: 'About Us',
        content: 'This about page was generated by the static routing system. It demonstrates how global and local data merge seamlessly.',
        team: [
          { name: 'Alice', role: 'Developer' },
          { name: 'Bob', role: 'Designer' },
          { name: 'Charlie', role: 'Product Manager' }
        ]
      })
    },
    // Note: Parameterized routes are skipped in static mode for now
    // This will be used when we add the "repeat" functionality
    {
      path: '/blog/:slug',
      name: 'blog-post',
      view: 'blog-post.html',
      data: async (params) => {
        return {
          title: `Blog Post: ${params.slug}`,
          slug: params.slug,
          content: `This would be the content for ${params.slug} (static mode skips parameterized routes for now)`
        };
      }
    }
  ],
  
  // Template compiler using Handlebars
  compiler: (template, data) => {
    try {
      const compiled = Handlebars.compile(template);
      return compiled(data);
    } catch (err) {
      console.warn(`⚠️  Template compilation error: ${err.message}`);
      return template;
    }
  }
};